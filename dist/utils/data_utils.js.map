{"version":3,"sources":["../../src/utils/data_utils.js"],"names":["DataFormatter","series","length","seriesType","_getSeriesType","_getSeries","_getSeriesTimeSeries","hashSeriesByLayerByKey","seriesLayer","id","forEach","series_elem","columns","map","elem","text","rows","series_elem_row","hashWithValues","i","push","setSeries","setSeriesByLayer","target","split","seriesFieldName","datapoints","Object","keys","layerName","superArray","column","result","line","type"],"mappings":"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","file":"data_utils.js","sourcesContent":["//import { isEqual, reduce, filter, transform, isObject } from 'lodash';\n\nclass DataFormatter {\n\n  getValues(series) {\n    if (!series || series.length === 0)\n      return {}\n\n    let seriesType = this._getSeriesType(series);\n\n    return ('table'===seriesType) ? this._getSeries(series) : this._getSeriesTimeSeries(series)\n  }\n\n  _getSeries(series) {\n    let hashSeriesByLayerByKey = {};\n    let seriesLayer = null;\n    let id = null;\n\n    series.forEach((series_elem) => {\n\n      let columns = series_elem.columns.map((elem)=>elem.text);\n\n      series_elem.rows.forEach((series_elem_row) => {\n        seriesLayer = series_elem_row[series_elem_row.length-1]\n\n        if (!(hashSeriesByLayerByKey[seriesLayer])) {\n          hashSeriesByLayerByKey[seriesLayer] = {};    \n        }\n\n        id = series_elem_row[1]\n        if (!(hashSeriesByLayerByKey[seriesLayer][id])) {\n          hashSeriesByLayerByKey[seriesLayer][id] = [];\n        }\n        \n        let hashWithValues = {}\n        columns.forEach((elem, i)=>{ \n          if(i!==0 && i!==columns.length-1) //do not insert grafana field 'time' and the group by field\n            hashWithValues[elem] = series_elem_row[i] \n        });\n        hashSeriesByLayerByKey[seriesLayer][id].push(hashWithValues);\n      });\n    });\n\n    return hashSeriesByLayerByKey;\n  }\n\n  _getSeriesTimeSeries(series) {\n    let setSeries = {};\n    let setSeriesByLayer = {}\n\n    series.forEach((series_elem) => {\n      let [seriesLayer, seriesFieldName] = series_elem.target.split(': ');\n   \n      if (!(setSeriesByLayer[seriesLayer])) {\n        setSeriesByLayer[seriesLayer] = [];        \n      }\n\n      setSeriesByLayer[seriesLayer].push([seriesFieldName, ...series_elem.datapoints.map((elem)=>elem[0])])\n    });\n\n\n    // get one array and transform into a hash\n    let hashSeriesByLayerByKey = {};\n\n    Object.keys(setSeriesByLayer).forEach((layerName)=>{\n      if (!hashSeriesByLayerByKey[layerName])\n        hashSeriesByLayerByKey[layerName] = {};  \n\n      let superArray = setSeriesByLayer[layerName]\n      \n      for(let column=1; column<superArray[0].length; column++) {\n        let result = {}\n        for(let line=0; line<superArray.length; line++) {\n          result[superArray[line][0]] = superArray[line][column]\n        }\n\n        if(!hashSeriesByLayerByKey[layerName][result.id])\n          hashSeriesByLayerByKey[layerName][result.id] = []\n\n        hashSeriesByLayerByKey[layerName][result.id].push(result)\n      } \n    })\n\n    return hashSeriesByLayerByKey;\n  }\n\n  _getSeriesType(series) {\n    return series[0].type;\n  }\n}\n\nexport { DataFormatter }\n"]}