{"version":3,"sources":["../../src/utils/data_utils.js"],"names":["DataFormatter","series","length","seriesType","_getSeriesType","_getSeries","_getSeriesTimeSeries","hashSeriesByLayerByKey","seriesLayer","id","forEach","series_elem","columns","map","elem","text","type_index","id_index","indexOf","console","warn","rows","series_elem_row","hashWithValues","i","push","setSeries","setSeriesByLayer","target","split","seriesFieldName","datapoints","Object","keys","layerName","superArray","column","result","line","type"],"mappings":"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","sourcesContent":["// import { isEqual, reduce, filter, transform, isObject } from 'lodash';\n\nclass DataFormatter {\n  getValues(series) {\n    if (!series || series.length === 0) return {};\n\n    const seriesType = this._getSeriesType(series);\n\n    return (seriesType === 'table') ? this._getSeries(series) : this._getSeriesTimeSeries(series);\n  }\n\n  _getSeries(series) {\n    const hashSeriesByLayerByKey = {};\n    let seriesLayer = null;\n    let id = null;\n\n    series.forEach((series_elem) => {\n      const columns = series_elem.columns.map((elem) => elem.text);\n      var type_index = columns.length - 1;\n      var id_index = 1;\n\n      if(columns.indexOf(\"type\") < 0){\n        console.warn(\"Missing type alias in the query (required to define layers)\");\n      } else {\n        type_index = columns.indexOf(\"type\");\n      }\n\n      if(columns.indexOf(\"id\") < 0 ){\n        console.warn(\"Missing id alias in the query\");\n      } else {\n        id_index = columns.indexOf(\"id\");\n      }\n\n      series_elem.rows.forEach((series_elem_row) => {\n        seriesLayer = series_elem_row[type_index];\n\n        if (!(hashSeriesByLayerByKey[seriesLayer])) {\n          hashSeriesByLayerByKey[seriesLayer] = {};\n        }\n\n        id = series_elem_row[id_index];\n        if (!(hashSeriesByLayerByKey[seriesLayer][id])) {\n          hashSeriesByLayerByKey[seriesLayer][id] = [];\n        }\n\n        const hashWithValues = {};\n        columns.forEach((elem, i) => {\n          if (i !== columns.indexOf(\"time\") && i !== columns.length - 1) // do not insert grafana field 'time' and the group by field\n          { hashWithValues[elem] = series_elem_row[i]; }\n        });\n        hashSeriesByLayerByKey[seriesLayer][id].push(hashWithValues);\n      });\n    });\n\n    return hashSeriesByLayerByKey;\n  }\n\n  _getSeriesTimeSeries(series) {\n    const setSeries = {};\n    const setSeriesByLayer = {};\n\n    series.forEach((series_elem) => {\n      const [seriesLayer, seriesFieldName] = series_elem.target.split(': ');\n\n      if (!(setSeriesByLayer[seriesLayer])) {\n        setSeriesByLayer[seriesLayer] = [];\n      }\n\n      setSeriesByLayer[seriesLayer].push([seriesFieldName, ...series_elem.datapoints.map((elem) => elem[0])]);\n    });\n\n\n    // get one array and transform into a hash\n    const hashSeriesByLayerByKey = {};\n\n    Object.keys(setSeriesByLayer).forEach((layerName) => {\n      if (!hashSeriesByLayerByKey[layerName]) hashSeriesByLayerByKey[layerName] = {};\n\n      const superArray = setSeriesByLayer[layerName];\n\n      for (let column = 1; column < superArray[0].length; column++) {\n        const result = {};\n        for (let line = 0; line < superArray.length; line++) {\n          result[superArray[line][0]] = superArray[line][column];\n        }\n\n        if (!hashSeriesByLayerByKey[layerName][result.id]) hashSeriesByLayerByKey[layerName][result.id] = [];\n\n        hashSeriesByLayerByKey[layerName][result.id].push(result);\n      }\n    });\n\n    return hashSeriesByLayerByKey;\n  }\n\n  _getSeriesType(series) {\n    return series[0].type;\n  }\n}\n\nexport { DataFormatter };\n"],"file":"data_utils.js"}