{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["drawPopups","panelId","lastValueMeasure","validatedMetrics","hideAllGraphPopups","document","querySelector","options","length","drawMeasuresPopup","type","aqiIndex","calculateAQIIndex","value","getElementById","style","display","drawHealthConcernsPopup","risks","color","meaning","drawTrafficFlowPopup","drawDefaultPopups","error","console","log","drawSelect","metricsToShow","providedMetrics","currentParameterForChart","el","firstChild","removeChild","metricsKeys","Object","keys","emptyOption","createElement","id","title","innerHTML","selected","appendChild","forEach","metric","elem","newMetric","toUpperCase","selectBox","renderChart","selectedPointData","measurementUnits","chartDetails","debug","pointId","fieldName","drawChartCointainer","chartData","map","convertDate","created_at","toLowerCase","getChartMetaInfo","props","AirQualityObserved","TrafficFlowObserved","units","chartInfo","bootData","user","lightTheme","theme","setOptions","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","name","data","getDataPointExtraFields","dataPoint","values","fillOpacity","aqiColor","fillColor","aqiMeaning","aqiRisk","aqi","markerColor","colorIndex","calculateCarsIntensityIndex","getMapMarkerClassName","resp","classColor","getDataPointStickyInfo","metricsTranslations","dataPointExtraFields","stickyInfo","getDataPointDetails","join","withoutGeojson","filter","key","translatedValues","dpKey","dP","Date","toLocaleString","trans","unit","translatedValue","getSelectedCity","vars","selectedVarName","cityEnv","city","current","map_table_popups","map_table_popup","popup","risk","map_size","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","measuresTable","rows","deleteRow","row","insertRow","innerCell0","innerCell1","cell0","insertCell","cell1","getCityCoordinates","city_name","url","replace","fetch","then","response","json","latitude","lat","longitude","lon","catch","range","index","time_","time","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","UTC","geolocationOptions","enableHighAccuracy","timeout","maximumAge"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\n/* Vendor specific */\nimport { defaults, isEqual } from 'lodash';\n\nimport Highcharts from \"../vendor/highcharts/highcharts\";\nimport Exporting from '../vendor/highcharts/modules/exporting';\n// Initialize exporting module.\nExporting(Highcharts);\n\n/* Grafana Specific */\nimport config from 'app/core/config';\n\nimport { titleize } from './string'\n\n/* App specific */\nimport { AQI, CARS_COUNT, NOMINATIM_ADDRESS } from '../definitions';\nimport { HIGHCHARTS_THEME_DARK } from '../utils/highcharts/custom_themes';\n\n\n/*\n* Primary functions\n*/\n\n/**\n* Display popups based in the click in map's marker\n*/\nfunction drawPopups(panelId, lastValueMeasure, validatedMetrics) {\n\n  //render popups\n  try {\n    // Show Metrics Legend (MAP)\n\n    //draw select\n    if(validatedMetrics) {\n\n      hideAllGraphPopups(panelId)\n\n      if(document.querySelector('#parameters_dropdown_'+panelId).options.length>1)\n        drawMeasuresPopup(panelId, lastValueMeasure, validatedMetrics)\n\n      switch(lastValueMeasure.type) {\n        case 'AirQualityObserved':\n          let aqiIndex = calculateAQIIndex(lastValueMeasure.value);\n          \n          document.getElementById('environment_table_'+panelId).style.display = 'block';\n\n          drawHealthConcernsPopup(panelId, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n     \n          break;\n        case 'TrafficFlowObserved':\n          drawTrafficFlowPopup(panelId);\n          break;\n        default:\n          drawDefaultPopups(panelId);\n      }\n    }\n    \n  } catch(error) {\n    console.log(\"Error:\");\n    console.log(error);\n    console.log(\"lastValueMeasure: \")\n    console.log(lastValueMeasure)\n  }\n}\n/*\n* Draw the select box in the specific panel, with the specif metrics and select the option\n*/\nfunction drawSelect(panelId, metricsToShow, providedMetrics, currentParameterForChart) {\n  // Remove air paramters from dropdown\n  let el = document.querySelector('#parameters_dropdown_'+panelId);\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n\n  let metricsKeys = Object.keys(metricsToShow)\n\n  //default option\n  let emptyOption = document.createElement('option');\n  emptyOption.id = 'metricsOption_'+panelId;\n  emptyOption.value = 'value';\n  emptyOption.title = \"Select this to see the default field values\"\n  emptyOption.innerHTML = 'Select Metric';\n  if(metricsKeys.length===0)\n    emptyOption.selected = 'selected';\n  el.appendChild(emptyOption);\n\n  //select population\n  metricsKeys.forEach((metric)=>{\n    providedMetrics.forEach((elem)=>{\n      if(elem[0] == metric) {\n        let newMetric = document.createElement('option');\n        newMetric.id = 'metricsOption_'+panelId;\n        newMetric.value = metric.toUpperCase();\n\n        if(currentParameterForChart===newMetric.value)\n          newMetric.selected = 'selected';\n        \n        newMetric.innerHTML = elem[1]?elem[1]:titleize(elem[0]);\n\n        el.appendChild(newMetric);\n      }\n    })\n  })\n  \n  let selectBox = document.querySelector('#parameters_dropdown_'+panelId)\n  if(selectBox.options.length>0)\n    selectBox.style.display = 'block';\n}\n/**\n* Render's the chart in panel\n*/\nfunction renderChart(panelId, selectedPointData, measurementUnits, chartDetails) {\n  console.debug('renderChart')\n  let [type, pointId, fieldName] = chartDetails\n\n  drawChartCointainer(panelId);\n\n  //prepare data to chart\n  let chartData = selectedPointData.map((elem)=>[ convertDate(elem.created_at), elem[fieldName.toLowerCase()] ]);\n\n  function getChartMetaInfo() {\n    let props = {\n      AirQualityObserved: 'Air Quality',\n      TrafficFlowObserved: 'Cars'\n    }\n\n    return { \n        title: `${props[type]||type}: Device ${pointId} - ${measurementUnits[1]?measurementUnits[1]:titleize(measurementUnits[0])}`,\n        units: (measurementUnits[2] ? `${measurementUnits[1]} (${measurementUnits[2]})` : measurementUnits[1])\n      }\n  }\n\n  let chartInfo = getChartMetaInfo();\n  \n  //config highchart acording with grafana theme\n  if(!config.bootData.user.lightTheme) {\n    Highcharts.theme = HIGHCHARTS_THEME_DARK;\n\n    // Apply the theme\n    Highcharts.setOptions(Highcharts.theme);\n  }\n\n  // let chart = angular.element(\n  //     document.getElementById('graph_container_'+panelId)\n  // ).highcharts();\n\n  Highcharts.chart('graph_container_'+panelId,\n    {\n      chart: {\n        type: 'line',\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {            \n            chartData = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n        text: chartInfo.title\n      },\n      subtitle: {\n        text: ''\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: chartInfo.units\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      series: [{\n        name: chartInfo.units,\n        data: chartData\n      }]\n    }\n  );\n}\n\n\n/**\n* private functions\n*/\nfunction getDataPointExtraFields(dataPoint) {\n\n  const values = {\n    fillOpacity: 0.5\n  }\n\n  if(dataPoint.type==='AirQualityObserved') {\n    let aqiIndex = calculateAQIIndex(dataPoint.value);\n    let aqiColor = AQI.color[aqiIndex];\n\n    defaults(values, {\n      color: aqiColor,\n      fillColor: aqiColor,\n\n      aqiColor: aqiColor,\n      aqiMeaning: AQI.meaning[aqiIndex],\n      aqiRisk: AQI.risks[aqiIndex],\n      aqi: dataPoint.value,\n\n      markerColor: AQI.markerColor[aqiIndex]\n    })    \n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      let colorIndex = calculateCarsIntensityIndex(dataPoint.value)\n\n      defaults(values, {\n        color: CARS_COUNT.color[colorIndex], \n        fillColor: CARS_COUNT.color[colorIndex],\n        \n        markerColor: CARS_COUNT.markerColor[colorIndex]\n      })\n    }\n  }\n\n  return values;\n}\n\nfunction getMapMarkerClassName(type, value) {\n  let resp = 'map-marker-';\n  if(type==='AirQualityObserved') {\n    return resp+AQI.classColor[calculateAQIIndex(value)];\n  } else if(type==='TrafficFlowObserved')\n    return resp+CARS_COUNT.classColor[calculateCarsIntensityIndex(value)];\n  return resp+'default';\n}\n\nfunction getDataPointStickyInfo(dataPoint, metricsTranslations) {\n  let dataPointExtraFields = getDataPointExtraFields(dataPoint);  \n  let stickyInfo = '<div class=\"stycky-popup-info\">';\n\n  if(dataPoint.type==='AirQualityObserved') {\n    stickyInfo += '<div class=\"head air-quality\">Air Quality</div>';\n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      stickyInfo += '<div class=\"head traffic-flow\">Cars Intensity</div>';\n    } else {\n      stickyInfo += '<div class=\"head\">' + dataPoint.type + '</div>';\n    }\n  }  \n\n  //body\n  stickyInfo += '<div class=\"body\">';\n  stickyInfo += getDataPointDetails(dataPoint, metricsTranslations).join('');\n  stickyInfo += '</div>';\n  stickyInfo += '</div>';\n\n  //console.debug(dataPoint)\n  return stickyInfo\n}\n\nfunction getDataPointDetails(dataPoint, metricsTranslations) {\n  const withoutGeojson = Object.keys(dataPoint).filter((key) => key !== 'geojson');\n  let translatedValues = withoutGeojson.map((dpKey)=>{\n    let dP = (dpKey==='created_at'?new Date(dataPoint[dpKey]).toLocaleString():dataPoint[dpKey]);\n    let trans = metricsTranslations.filter((elem)=>elem[0]===dpKey);\n    return { 'name': (trans.length>0 && trans[0][1] ? trans[0][1] : titleize(dpKey) ), value: dP||'-', unit: (trans.length>0 ? trans[0][2] : '') }\n  })\n  //creation of html row\n  return translatedValues.map((translatedValue)=>`<div><span>${translatedValue.name}</span><span>${translatedValue.value} ${translatedValue.unit||''}</span></div>`)\n}\n\n//show all accepted metrics for a specific point id\n// function getMetricsToShow(allMetrics, id) {\n//   const metricsToShow = {};\n//   for (const key in allMetrics) {\n//     allMetrics[key].forEach((_value) => {\n//       if (_value.id === id) {\n//         if (_value.value) {\n//           if (!(metricsToShow[key])){\n//             metricsToShow[key] = 0;\n//           }\n//           metricsToShow[key] = _value.value;\n//         }\n//       }\n//     });\n//   }\n\n//   //  metricsToShow['aqi'] = aqi;\n//   return metricsToShow\n// }\n\n// Given vars passed as param, retrieves the selected city\nfunction getSelectedCity(vars, selectedVarName) {\n  let cityEnv = vars.filter(elem => elem.name===selectedVarName)\n\n  let city = null;\n  if(cityEnv && cityEnv.length === 1)\n    city = cityEnv[0].current.value;\n\n  return city;\n}\n\nfunction hideAllGraphPopups(panelId) {\n  let map_table_popups = ['measures_table', 'health_concerns_wrapper', 'environment_table', 'traffic_table'];\n\n  for(let map_table_popup of map_table_popups) {\n    let popup = document.getElementById(map_table_popup+'_'+panelId);\n    if(popup)\n      popup.style.display = 'none';\n  }\n}\n\nfunction drawDefaultPopups() {  \n}\n/*\n* Draw Traffic Flow Popup\n*/\nfunction drawTrafficFlowPopup(panelId) {\n  document.getElementById('traffic_table_'+panelId).style.display = 'block';\n}\n/*\n* Draw Health Concerns Popup\n*/\nfunction drawHealthConcernsPopup(panelId, risk, color, meaning, map_size) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper_'+panelId);\n  const healthConcerns = document.querySelector('#health_concerns_wrapper_'+panelId+'>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper_'+panelId+'>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk_'+panelId);\n\n  healthConcernsWrapper.style.display = 'block';\n  healthConcernsColor.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\n/*\n* Draw Measures Popup - The popup info is related with the choosed value \n*  from select box and with the metrics that came from result set\n*  and from a list of what to show metrics\n*/\nfunction drawMeasuresPopup(panelId, metricsToShow, providedMetrics) {\n  const measuresTable = document.querySelector('#measures_table_'+panelId+' > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  Object.keys(metricsToShow).forEach((metric)=>{\n    providedMetrics.forEach((elem)=>{\n      if(elem[0] == metric) {\n        let row = measuresTable.insertRow();    // -1 for inserting bottom\n        let innerCell0 = elem[1]?elem[1]:titleize(elem[0]);\n        let innerCell1 = (metricsToShow[metric] ? metricsToShow[metric] : '-') + (elem[2]?` ${elem[2]}`:'');\n        let cell0 = row.insertCell(0);\n        let cell1 = row.insertCell(1);\n\n        cell0.innerHTML = innerCell0;\n        cell1.innerHTML = innerCell1;        \n      }\n    })\n\n  })\n\n  document.getElementById('measures_table_'+panelId).style.display = 'block';\n}\n/*\n* Draw Chart\n*/\nfunction drawChartCointainer(panelId) {\n  document.querySelector('#data_details_'+panelId).style.display = 'block';\n  document.getElementById('data_chart_'+panelId).style.display = 'block';\n}\n\n// Access remote api and gives the coordinates from a city center based on NOMINATIM url server\nfunction getCityCoordinates(city_name) {\n  let url = NOMINATIM_ADDRESS.replace('<city_name>', city_name)\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => { return { latitude: data[0].lat, longitude: data[0].lon } })\n    .catch(error => console.error(error))\n}\n\n// gets the aqi index from the AQI var\nfunction calculateAQIIndex(value) {\n  let aqiIndex;\n  AQI.range.forEach((elem, index) => {\n    if (value >= elem) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n// gets the index from the CARS_COUNT const var\nfunction calculateCarsIntensityIndex(value) {\n  CARS_COUNT.range.forEach((elem, index) => {\n    if (value >= elem) {\n      return index;\n    }\n  });\n  return 0;\n}\n\n/*\n* Auxiliar functions\n*/\n// just for improve DRY\nfunction convertDate(time_) {\n  const time = new Date(time_);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds)\n}\n\nvar geolocationOptions = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 110\n};\n\nexport {\n\n  hideAllGraphPopups, \n  drawPopups,\n  drawSelect,\n  renderChart,\n\n  getCityCoordinates,\n\n  getDataPointExtraFields,\n  getDataPointStickyInfo,\n\n  getSelectedCity,\n\n  getMapMarkerClassName,\n\n  geolocationOptions\n}"]}