{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["Highcharts","drawPopups","panelId","lastValueMeasure","validatedMetrics","hideAllGraphPopups","document","querySelector","options","length","drawMeasuresPopup","type","aqiIndex","calculateAQIIndex","value","getElementById","style","display","drawHealthConcernsPopup","AQI","risks","color","meaning","drawTrafficFlowPopup","drawDefaultPopups","error","console","log","drawSelect","metricsToShow","providedMetrics","currentParameterForChart","el","firstChild","removeChild","metricsKeys","Object","keys","emptyOption","createElement","id","title","innerHTML","selected","appendChild","forEach","metric","elem","newMetric","toUpperCase","selectBox","renderChart","selectedPointData","measurementUnits","chartDetails","debug","pointId","fieldName","drawChartCointainer","chartData","map","convertDate","created_at","toLowerCase","getChartMetaInfo","props","AirQualityObserved","TrafficFlowObserved","units","chartInfo","config","bootData","user","lightTheme","theme","HIGHCHARTS_THEME_DARK","setOptions","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","name","data","getDataPointExtraFields","dataPoint","values","fillOpacity","aqiColor","fillColor","aqiMeaning","aqiRisk","aqi","markerColor","colorIndex","calculateCarsIntensityIndex","CARS_COUNT","getMapMarkerClassName","resp","classColor","getDataPointStickyInfo","metricsTranslations","dataPointExtraFields","stickyInfo","getDataPointDetails","join","withoutGeojson","filter","key","translatedValues","dpKey","dP","Date","toLocaleString","trans","translatedValue","unit","getSelectedCity","vars","selectedVarName","cityEnv","city","current","map_table_popups","map_table_popup","popup","risk","map_size","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","measuresTable","rows","deleteRow","row","insertRow","innerCell0","innerCell1","cell0","insertCell","cell1","getCityCoordinates","city_name","url","NOMINATIM_ADDRESS","replace","fetch","then","response","json","latitude","lat","longitude","lon","range","index","time_","time","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","UTC","geolocationOptions","enableHighAccuracy","timeout","maximumAge"],"mappings":"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","sourcesContent":["// draw components in the map\n/* Vendor specific */\nimport { defaults, isEqual } from 'lodash';\n\nimport config from 'app/core/config';\nimport Highcharts from '../vendor/highcharts/highcharts';\nimport Exporting from '../vendor/highcharts/modules/exporting';\n\n/* Grafana Specific */\n\nimport { titleize } from './string';\n\n/* App specific */\nimport { AQI, CARS_COUNT, NOMINATIM_ADDRESS } from '../definitions';\nimport { HIGHCHARTS_THEME_DARK } from './highcharts/custom_themes';\n// Initialize exporting module.\nExporting(Highcharts);\n\n\n/*\n* Primary functions\n*/\n\n/**\n* Display popups based in the click in map's marker\n*/\nfunction drawPopups(panelId, lastValueMeasure, validatedMetrics) {\n  // render popups\n  try {\n    // Show Metrics Legend (MAP)\n\n    // draw select\n    if (validatedMetrics) {\n      hideAllGraphPopups(panelId);\n\n      if (document.querySelector('#parameters_dropdown_' + panelId).options.length > 1) drawMeasuresPopup(panelId, lastValueMeasure, validatedMetrics);\n\n      switch (lastValueMeasure.type) {\n        case 'AirQualityObserved':\n          const aqiIndex = calculateAQIIndex(lastValueMeasure.value);\n\n          document.getElementById('environment_table_' + panelId).style.display = 'block';\n\n          drawHealthConcernsPopup(panelId, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n\n          break;\n        case 'TrafficFlowObserved':\n          drawTrafficFlowPopup(panelId);\n          break;\n        default:\n          drawDefaultPopups(panelId);\n      }\n    }\n  } catch (error) {\n    console.log('Error:');\n    console.log(error);\n    console.log('lastValueMeasure: ');\n    console.log(lastValueMeasure);\n  }\n}\n/*\n* Draw the select box in the specific panel, with the specif metrics and select the option\n*/\nfunction drawSelect(panelId, metricsToShow, providedMetrics, currentParameterForChart) {\n  // Remove air paramters from dropdown\n  const el = document.querySelector('#parameters_dropdown_' + panelId);\n  while (el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n\n  const metricsKeys = Object.keys(metricsToShow);\n\n  // default option\n  const emptyOption = document.createElement('option');\n  emptyOption.id = 'metricsOption_' + panelId;\n  emptyOption.value = 'value';\n  emptyOption.title = 'Select this to see the default field values';\n  emptyOption.innerHTML = 'Select Metric';\n  if (metricsKeys.length === 0) emptyOption.selected = 'selected';\n  el.appendChild(emptyOption);\n\n  // select population\n  metricsKeys.forEach((metric) => {\n    providedMetrics.forEach((elem) => {\n      if (elem[0] == metric) {\n        const newMetric = document.createElement('option');\n        newMetric.id = 'metricsOption_' + panelId;\n        newMetric.value = metric.toUpperCase();\n\n        if (currentParameterForChart === newMetric.value) newMetric.selected = 'selected';\n\n        newMetric.innerHTML = elem[1] ? elem[1] : titleize(elem[0]);\n\n        el.appendChild(newMetric);\n      }\n    });\n  });\n\n  const selectBox = document.querySelector('#parameters_dropdown_' + panelId);\n  if (selectBox.options.length > 0) selectBox.style.display = 'block';\n}\n/**\n* Render's the chart in panel\n*/\nfunction renderChart(panelId, selectedPointData, measurementUnits, chartDetails) {\n  console.debug('renderChart');\n  const [type, pointId, fieldName] = chartDetails;\n\n  drawChartCointainer(panelId);\n\n  // prepare data to chart\n  let chartData = selectedPointData.map((elem) => [ convertDate(elem.created_at), elem[fieldName.toLowerCase()] ]);\n\n  function getChartMetaInfo() {\n    const props = {\n      AirQualityObserved: 'Air Quality',\n      TrafficFlowObserved: 'Cars'\n    };\n\n    return {\n      title: `${props[type] || type}: Device ${pointId} - ${measurementUnits[1] ? measurementUnits[1] : titleize(measurementUnits[0])}`,\n      units: (measurementUnits[2] ? `${measurementUnits[1]} (${measurementUnits[2]})` : measurementUnits[1])\n    };\n  }\n\n  const chartInfo = getChartMetaInfo();\n\n  // config highchart acording with grafana theme\n  if (!config.bootData.user.lightTheme) {\n    Highcharts.theme = HIGHCHARTS_THEME_DARK;\n\n    // Apply the theme\n    Highcharts.setOptions(Highcharts.theme);\n  }\n\n  // let chart = angular.element(\n  //     document.getElementById('graph_container_'+panelId)\n  // ).highcharts();\n\n  Highcharts.chart('graph_container_' + panelId,\n    {\n      chart: {\n        type: 'line',\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {\n            chartData = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n        text: chartInfo.title\n      },\n      subtitle: {\n        text: ''\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: chartInfo.units\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      series: [{\n        name: chartInfo.units,\n        data: chartData\n      }]\n    });\n}\n\n\n/**\n* private functions\n*/\nfunction getDataPointExtraFields(dataPoint) {\n  const values = {\n    fillOpacity: 0.5\n  };\n\n  if (dataPoint.type === 'AirQualityObserved') {\n    const aqiIndex = calculateAQIIndex(dataPoint.value);\n    const aqiColor = AQI.color[aqiIndex];\n\n    defaults(values, {\n      color: aqiColor,\n      fillColor: aqiColor,\n\n      aqiColor: aqiColor,\n      aqiMeaning: AQI.meaning[aqiIndex],\n      aqiRisk: AQI.risks[aqiIndex],\n      aqi: dataPoint.value,\n\n      markerColor: AQI.markerColor[aqiIndex]\n    });\n  } else if (dataPoint.type === 'TrafficFlowObserved') {\n    const colorIndex = calculateCarsIntensityIndex(dataPoint.value);\n\n    defaults(values, {\n      color: CARS_COUNT.color[colorIndex],\n      fillColor: CARS_COUNT.color[colorIndex],\n\n      markerColor: CARS_COUNT.markerColor[colorIndex]\n    });\n  }\n\n  return values;\n}\n\nfunction getMapMarkerClassName(type, value) {\n  const resp = 'map-marker-';\n  if (type === 'AirQualityObserved') {\n    return resp + AQI.classColor[calculateAQIIndex(value)];\n  } if (type === 'TrafficFlowObserved') return resp + CARS_COUNT.classColor[calculateCarsIntensityIndex(value)];\n  return resp + 'default';\n}\n\nfunction getDataPointStickyInfo(dataPoint, metricsTranslations) {\n  const dataPointExtraFields = getDataPointExtraFields(dataPoint);\n  let stickyInfo = '<div class=\"stycky-popup-info\">';\n\n  if (dataPoint.type === 'AirQualityObserved') {\n    stickyInfo += '<div class=\"head air-quality\">Air Quality</div>';\n  } else if (dataPoint.type === 'TrafficFlowObserved') {\n    stickyInfo += '<div class=\"head traffic-flow\">Cars Intensity</div>';\n  } else {\n    stickyInfo += '<div class=\"head\">' + dataPoint.type + '</div>';\n  }\n\n  // body\n  stickyInfo += '<div class=\"body\">';\n  stickyInfo += getDataPointDetails(dataPoint, metricsTranslations).join('');\n  stickyInfo += '</div>';\n  stickyInfo += '</div>';\n\n  // console.debug(dataPoint)\n  return stickyInfo;\n}\n\nfunction getDataPointDetails(dataPoint, metricsTranslations) {\n  const withoutGeojson = Object.keys(dataPoint).filter((key) => key !== 'geojson');\n  const translatedValues = withoutGeojson.map((dpKey) => {\n    const dP = (dpKey === 'created_at' ? new Date(dataPoint[dpKey]).toLocaleString() : dataPoint[dpKey]);\n    const trans = metricsTranslations.filter((elem) => elem[0] === dpKey);\n    return { 'name': (trans.length > 0 && trans[0][1] ? trans[0][1] : titleize(dpKey)), 'value': dP || '-', 'unit': (trans.length > 0 ? trans[0][2] : '') };\n  });\n  // creation of html row\n  return translatedValues.map((translatedValue) => `<div><span>${translatedValue.name}</span><span>${translatedValue.value} ${translatedValue.unit || ''}</span></div>`);\n}\n\n// show all accepted metrics for a specific point id\n// function getMetricsToShow(allMetrics, id) {\n//   const metricsToShow = {};\n//   for (const key in allMetrics) {\n//     allMetrics[key].forEach((_value) => {\n//       if (_value.id === id) {\n//         if (_value.value) {\n//           if (!(metricsToShow[key])){\n//             metricsToShow[key] = 0;\n//           }\n//           metricsToShow[key] = _value.value;\n//         }\n//       }\n//     });\n//   }\n\n//   //  metricsToShow['aqi'] = aqi;\n//   return metricsToShow\n// }\n\n// Given vars passed as param, retrieves the selected city\nfunction getSelectedCity(vars, selectedVarName) {\n  const cityEnv = vars.filter((elem) => elem.name === selectedVarName);\n\n  let city = null;\n  if (cityEnv && cityEnv.length === 1) city = cityEnv[0].current.value;\n\n  return city;\n}\n\nfunction hideAllGraphPopups(panelId) {\n  const map_table_popups = ['measures_table', 'health_concerns_wrapper', 'environment_table', 'traffic_table'];\n\n  for (const map_table_popup of map_table_popups) {\n    const popup = document.getElementById(map_table_popup + '_' + panelId);\n    if (popup) popup.style.display = 'none';\n  }\n}\n\nfunction drawDefaultPopups() {\n}\n/*\n* Draw Traffic Flow Popup\n*/\nfunction drawTrafficFlowPopup(panelId) {\n  document.getElementById('traffic_table_' + panelId).style.display = 'block';\n}\n/*\n* Draw Health Concerns Popup\n*/\nfunction drawHealthConcernsPopup(panelId, risk, color, meaning, map_size) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper_' + panelId);\n  const healthConcerns = document.querySelector('#health_concerns_wrapper_' + panelId + '>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper_' + panelId + '>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk_' + panelId);\n\n  healthConcernsWrapper.style.display = 'block';\n  healthConcernsColor.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\n/*\n* Draw Measures Popup - The popup info is related with the choosed value\n*  from select box and with the metrics that came from result set\n*  and from a list of what to show metrics\n*/\nfunction drawMeasuresPopup(panelId, metricsToShow, providedMetrics) {\n  const measuresTable = document.querySelector('#measures_table_' + panelId + ' > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  Object.keys(metricsToShow).forEach((metric) => {\n    providedMetrics.forEach((elem) => {\n      if (elem[0] == metric) {\n        const row = measuresTable.insertRow(); // -1 for inserting bottom\n        const innerCell0 = elem[1] ? elem[1] : titleize(elem[0]);\n        const innerCell1 = (metricsToShow[metric] ? metricsToShow[metric] : '-') + (elem[2] ? ` ${elem[2]}` : '');\n        const cell0 = row.insertCell(0);\n        const cell1 = row.insertCell(1);\n\n        cell0.innerHTML = innerCell0;\n        cell1.innerHTML = innerCell1;\n      }\n    });\n  });\n\n  document.getElementById('measures_table_' + panelId).style.display = 'block';\n}\n/*\n* Draw Chart\n*/\nfunction drawChartCointainer(panelId) {\n  document.querySelector('#data_details_' + panelId).style.display = 'block';\n  document.getElementById('data_chart_' + panelId).style.display = 'block';\n}\n\n// Access remote api and gives the coordinates from a city center based on NOMINATIM url server\nfunction getCityCoordinates(city_name) {\n  const url = NOMINATIM_ADDRESS.replace('<city_name>', city_name);\n  return fetch(url)\n    .then((response) => response.json())\n    .then((data) => { return { latitude: data[0].lat, longitude: data[0].lon }; })\n    .catch((error) => console.error(error));\n}\n\n// gets the aqi index from the AQI var\nfunction calculateAQIIndex(value) {\n  let aqiIndex;\n  AQI.range.forEach((elem, index) => {\n    if (value >= elem) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n// gets the index from the CARS_COUNT const var\nfunction calculateCarsIntensityIndex(value) {\n  CARS_COUNT.range.forEach((elem, index) => {\n    if (value >= elem) {\n      return index;\n    }\n  });\n  return 0;\n}\n\n/*\n* Auxiliar functions\n*/\n// just for improve DRY\nfunction convertDate(time_) {\n  const time = new Date(time_);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return Date.UTC(year, month, day, hour + 1, minutes, seconds, milliseconds);\n}\n\nconst geolocationOptions = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 110\n};\n\nexport {\n\n  hideAllGraphPopups,\n  drawPopups,\n  drawSelect,\n  renderChart,\n\n  getCityCoordinates,\n\n  getDataPointExtraFields,\n  getDataPointStickyInfo,\n\n  getSelectedCity,\n\n  getMapMarkerClassName,\n\n  geolocationOptions\n};\n"],"file":"map_utils.js"}