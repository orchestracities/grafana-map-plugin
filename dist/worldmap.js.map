{"version":3,"sources":["../src/worldmap.js"],"names":["L","turf","CIRCLE_RADIUS","POLYGON_MAGNIFY_RATIO","WorldMap","ctrl","mapContainer","validatedMetrics","timeSeries","chartSeries","chartData","currentTargetForChart","currentParameterForChart","map","geoMarkers","events","on","flagChartRefresh","bind","setDefaultValues","refreshChart","layerNames","layerGroup","location","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","layers","getLayers","sleepNote","sleepOpacity","hoverToWake","worldCopyJump","center","zoomControl","minZoom","maxZoom","attributionControl","setZoom","initialZoom","panTo","control","zoom","position","addTo","addLayersToMap","id","zoomLevel","getZoom","updateGeoLayers","selectedTileServer","tileServer","tileLayer","url","subdomains","reuseTiles","detectRetina","attribution","document","querySelector","addEventListener","event","currentTarget","value","console","debug","drawPointDetails","overlayMaps","i","length","forEach","layer","clearLayers","geoMarkersVisibilityZoomLevelThreshold","Object","keys","layerKey","hasLayer","removeLayer","addLayer","metrics","error","warn","Error","data","markersGJ","geoJSON","markers","markerClusterGroup","objectKey","lastObjectValues","type","geoJsonName","keyArray","k","toLowerCase","markerColor","getGeoMarkerColor","latitude","undefined","longitude","centroid","geometry","coordinates","newGJ","createGeoJson","newIcon","createIcon","push","objectValues","bindingValue","geoMarkerColoringBinding","getGeoMarkerColorThesholds","medium","high","geoMarkerColoringColorLow","geoMarkerColoringColorHigh","geoMarkerColoringColorMedium","thresholds","geoMarkerColoringThresholds","splitted","split","parseInt","dataPoint","geoMarkerColor","myStyle","retVal","style","JSON","parse","createPopup","associateEvents","layerIcon","layersIcons","icon","createMarker","createShape","dataPointExtraFields","shape","circle","rectangle","color","polygon","elementIcon","elementColor","markerProperties","AwesomeMarkers","prefix","marker","stickyPopupInfo","bindPopup","point","stickyLabels","openPopup","closePopup","setTimeout","invalidateSize","flyTo","mapCenterMoved","legend","removeFrom","zoomFactor","target","options","selectedPointValues","lastValueMeasure","isToRefreshChart","getTranslation","elem","created_at","currentChartData","measuresMetaInfo","measure","resp","filter","measure_"],"mappings":"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","file":"worldmap.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\n\n/* Vendor specific */\nimport { defaultsDeep, isEqual } from 'lodash';\n\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers.css!';\n\nimport * as L from './vendor/leaflet/leaflet';\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers';\nimport './vendor/leaflet-sleep/Leaflet.Sleep';\nimport './vendor/leaflet.markercluster/leaflet.markercluster';\nimport './vendor/leaflet.markercluster/MarkerCluster.Default.css!';\nimport './vendor/leaflet.markercluster/MarkerCluster.css!';\n\n/* App Specific */\nimport { TILE_SERVERS, PLUGIN_PATH } from './definitions';\nimport {\n  dataTreatment, processData, getTimeSeries, getUpdatedChartSeries,\n  drawSelect, drawPopups, renderChart,\n  hideAllGraphPopups, getDataPointExtraFields, getDataPointStickyInfo,\n  getMapMarkerClassName\n} from './utils/map_utils';\n\nimport * as turf from './vendor/turf/turf';\n\nconst CIRCLE_RADIUS = 200\nconst POLYGON_MAGNIFY_RATIO = 3\n\nexport default class WorldMap {\n\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.validatedMetrics = {};\n    this.timeSeries = {};\n    this.chartSeries = {};\n    this.chartData = [];\n    this.currentTargetForChart = null;\n    this.currentParameterForChart = null;\n    this.map = null;\n    this.geoMarkers = {};\n\n    this.ctrl.events.on('panel-size-changed', this.flagChartRefresh.bind(this));\n\n    this.setDefaultValues();\n  }\n\n  flagChartRefresh() {\n    this.refreshChart = true\n  }\n  getLayers() {\n    return this.ctrl.layerNames.map(elem => L.layerGroup())\n  }\n\n  createMap() {\n    let location = [ parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude) ]\n\n    this.layers = this.getLayers()\n\n    this.map = L.map(this.mapContainer,\n      {\n        sleepNote: false,\n        sleepOpacity: .8,\n        hoverToWake: false,\n        worldCopyJump: true,\n        center: location,\n        zoomControl: false,\n        minZoom: 3,\n        maxZoom: 20,\n        attributionControl: false,\n        layers: this.layers\n      })\n\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map.panTo(location);\n    L.control.zoom({position: 'topright'}).addTo(this.map);\n    this.addLayersToMap();\n\n    // this.map.on('zoomstart', (e) => { mapZoom = this.map.getZoom() });\n    this.map.on('click', () => {\n      hideAllGraphPopups(this.ctrl.panel.id);\n      this.currentTargetForChart = null;\n    });\n\n    this.map.on('zoomend', () => {\n      var zoomLevel = this.map.getZoom();\n      this.updateGeoLayers(zoomLevel);\n    });\n\n    const selectedTileServer = TILE_SERVERS[this.ctrl.tileServer];\n    L.tileLayer(selectedTileServer.url, {\n      maxZoom: 20,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n    document.querySelector('#parameters_dropdown_'+this.ctrl.panel.id)\n      .addEventListener('change', (event) => {\n        this.currentParameterForChart = event.currentTarget.value;\n        console.debug('selecting point for measure:')\n        console.debug(this.currentParameterForChart)\n        this.drawPointDetails();\n      }); //, {passive: true} <= to avoid blocking\n  }\n\n  addLayersToMap() {\n    this.overlayMaps = {};\n    for (let i=0; i<this.ctrl.layerNames.length; i++)\n      this.overlayMaps[this.ctrl.layerNames[i]]=this.layers[i]\n    L.control.layers({}, this.overlayMaps).addTo(this.map);\n  }\n\n  clearLayers() {\n    this.layers.forEach((layer)=>layer.clearLayers())\n  }\n\n  updateGeoLayers(zoomLevel) {\n    const geoMarkersVisibilityZoomLevelThreshold = 16;\n\n    Object.keys(this.geoMarkers).forEach((layerKey) => {\n      for (const layer of this.geoMarkers[layerKey]) {\n        if (zoomLevel < geoMarkersVisibilityZoomLevelThreshold) {\n          if (this.overlayMaps[layerKey].hasLayer(layer)) {\n            this.overlayMaps[layerKey].removeLayer(layer);\n          }\n        }\n        else {\n          if (!this.overlayMaps[layerKey].hasLayer(layer)) {\n            this.overlayMaps[layerKey].addLayer(layer);\n          }\n        }\n      }\n    })\n  }\n\n  /* Validate metrics for a given target*/\n  setMetrics() {\n    try {\n      this.validatedMetrics = this.ctrl.panel.metrics;\n    } catch(error) {\n      console.warn(error)\n      throw new Error('Please insert a valid JSON in the Metrics field (Edit > Tab Worldmap > Section AirQualityObserved - Metrics field)');\n    }\n  }\n\n  drawPoints() {\n    this.geoMarkers = {};\n    \n    Object.keys(this.ctrl.data).forEach((layerKey) => {\n      let layer = this.ctrl.data[layerKey];\n      \n      let markersGJ = L.geoJSON();\n      let markers = L.markerClusterGroup();\n\n      //for each layer\n      Object.keys(layer).forEach((objectKey) => {\n        let lastObjectValues = layer[objectKey][layer[objectKey].length-1];\n        lastObjectValues.type = layerKey;\n\n        var geoJsonName = null;\n        var keyArray = Object.keys(lastObjectValues);\n        for (var k = 0; k < keyArray.length; k++) {\n            if(keyArray[k].toLowerCase() === 'geojson'){\n                geoJsonName = keyArray[k];\n                break;\n            }\n        }\n\n        const markerColor = this.getGeoMarkerColor(lastObjectValues);\n\n        if (geoJsonName !== null && lastObjectValues.latitude === undefined && lastObjectValues.longitude === undefined) {\n          var centroid = turf.centroid(lastObjectValues[geoJsonName]);\n          lastObjectValues.longitude = centroid.geometry.coordinates[0];\n          lastObjectValues.latitude = centroid.geometry.coordinates[1];\n        }\n\n        if(geoJsonName && lastObjectValues[geoJsonName] && lastObjectValues[geoJsonName].type !== 'Point') {\n          let newGJ = this.createGeoJson(lastObjectValues, geoJsonName, markerColor);\n          newGJ.addTo(markersGJ);\n        }\n        if (lastObjectValues.latitude && lastObjectValues.longitude) {\n          let newIcon = this.createIcon(lastObjectValues, geoJsonName, markerColor);\n          try {\n            if(newIcon)\n              markers.addLayer(newIcon);\n          } catch(error) { console.warn(layerKey); console.warn(error); }\n        }\n      })\n\n      this.overlayMaps[layerKey].addLayer(markers);\n      this.overlayMaps[layerKey].addLayer(markersGJ);\n\n      this.geoMarkers[layerKey] = this.geoMarkers[layerKey] || [];\n      this.geoMarkers[layerKey].push(markersGJ);\n    });\n  }\n\n  getGeoMarkerColor(objectValues) {\n    const bindingValue = objectValues[this.ctrl.panel.geoMarkerColoringBinding];\n    const {medium, high} = this.getGeoMarkerColorThesholds();\n\n    if (bindingValue < medium) {\n      return this.ctrl.panel.geoMarkerColoringColorLow;\n    }\n    if (bindingValue > high) {\n      return this.ctrl.panel.geoMarkerColoringColorHigh;\n    }\n    return this.ctrl.panel.geoMarkerColoringColorMedium;\n  }\n\n  getGeoMarkerColorThesholds() {\n    const thresholds = this.ctrl.panel.geoMarkerColoringThresholds || \"\";\n    const splitted = thresholds.split(\",\");\n    return {\n      medium: parseInt(splitted[0], 10),\n      high: parseInt(splitted[1], 10),\n    };\n  }\n\n  createGeoJson(dataPoint, geoJsonName, geoMarkerColor) {  \n    var myStyle = {\n      \"color\": geoMarkerColor,\n      \"weight\": 5,\n      \"opacity\": 0.65\n    };\n    var retVal;\n    if(typeof dataPoint[geoJsonName] === 'object') {\n        retVal = L.geoJSON(dataPoint[geoJsonName], {\n            style: myStyle\n        });\n    } else {\n        retVal = L.geoJSON(JSON.parse(dataPoint[geoJsonName]), {\n          style: myStyle\n        });\n    }\n\n    this.createPopup(\n        this.associateEvents(retVal),\n        getDataPointStickyInfo(dataPoint, this.ctrl.panel.metrics)\n    );\n    return retVal;\n  }\n\n  createIcon(dataPoint, geoJsonName, markerColor) {\n    //console.log(this.ctrl.panel.layersIcons)\n    if(!dataPoint || !dataPoint.type)\n      return null;\n\n    let layerIcon = this.ctrl.panel.layersIcons[dataPoint.type];\n    let icon = layerIcon ? this.createMarker(dataPoint, layerIcon, markerColor) : this.createShape(dataPoint);\n\n    this.createPopup(\n      this.associateEvents(icon),\n      getDataPointStickyInfo(dataPoint, this.ctrl.panel.metrics)\n    );\n\n    return icon;\n  }\n\n  createShape(dataPoint) {\n    let dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    let shape;\n\n    defaultsDeep(dataPointExtraFields, dataPoint)\n\n    switch(dataPoint.type) {\n      case 'AirQualityObserved':\n        shape = L.circle([dataPoint.latitude, dataPoint.longitude], CIRCLE_RADIUS, dataPointExtraFields)\n      break;\n      case 'TrafficFlowObserved':\n        shape = L.rectangle([\n            [dataPoint.latitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude-(0.0015*POLYGON_MAGNIFY_RATIO)],\n            [dataPoint.latitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude+(0.0015*POLYGON_MAGNIFY_RATIO)]\n          ], dataPointExtraFields)\n        //shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointExtraFields)\n      break;\n      default:\n        dataPointExtraFields.color='green'  //default color\n        shape = L.polygon([\n          [dataPoint.latitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude-(0.0015*POLYGON_MAGNIFY_RATIO)],\n          [dataPoint.latitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude],\n          [dataPoint.latitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude+(0.0015*POLYGON_MAGNIFY_RATIO)],\n        ], dataPointExtraFields)\n    }\n\n    return shape;\n  }\n\n  createMarker(dataPoint, elementIcon, elementColor) {\n    let dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    let location = [dataPoint.latitude, dataPoint.longitude];\n\n    let markerProperties = {\n      icon: L.AwesomeMarkers.icon(\n        {\n          icon: elementIcon,\n          prefix: 'fa',\n          markerColor: (elementColor ? elementColor : dataPointExtraFields.markerColor),\n          //spin: true,\n        }\n      )\n    }\n    defaultsDeep(markerProperties, dataPoint)\n\n    return L.marker(location, markerProperties);\n  }\n\n  associateEvents(shape) {\n    return shape\n      .on('click', (event) => {this.currentTargetForChart = event})\n      .on('click', () => this.drawPointDetails())\n  }\n\n  createPopup(shape, stickyPopupInfo) {\n    shape.bindPopup(stickyPopupInfo,\n      {\n        'offset': L.point(0, -2),\n        'className': 'worldmap-popup',\n        'closeButton': this.ctrl.panel.stickyLabels\n      }\n    );\n\n    if (!this.ctrl.panel.stickyLabels) {\n      shape.on('mouseover', function () { this.openPopup() });\n      shape.on('mouseout', function () { this.closePopup() });\n    }\n  }\n\n  setTarget(event) {\n    this.currentTargetForChart = event;\n  }\n\n  resize() {\n    setTimeout(() => {\n      this.map.invalidateSize();\n    }, 0);\n  }\n\n  panToMapCenter() {\n    let location = [parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]\n\n/*    if ( 'Location Variable' === this.ctrl.panel.mapCenter && this.ctrl.isADiferentCity() ) {\n      console.log('diferent city detected')\n\n      this.ctrl.setNewCoords()\n        .then(() => {\n          console.debug('flying to a new location')\n          console.debug(location)\n          this.map.flyTo(location)\n          this.ctrl.refresh();\n        })\n        .catch(error => console.warn(error))\n      return ;\n    }*/\n\n    this.map.flyTo(location);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  drawPointDetails() {\n    console.debug('drawPointDetails');\n    if(this.currentTargetForChart==null){\n      console.debug('no point selected in map');\n      return ;\n    }\n\n    let currentParameterForChart = this.currentParameterForChart || 'value';\n    if (!this.currentTargetForChart.target.options.type || this.currentTargetForChart.target.options.id) {\n      return;\n    }\n    let selectedPointValues = this.ctrl.data[this.currentTargetForChart.target.options.type][this.currentTargetForChart.target.options.id];\n    if (!selectedPointValues) {\n        return;\n    }\n    let lastValueMeasure = selectedPointValues[selectedPointValues.length - 1];\n\n    drawSelect(this.ctrl.panel.id, lastValueMeasure, this.validatedMetrics, currentParameterForChart);\n\n    drawPopups(this.ctrl.panel.id, lastValueMeasure, this.validatedMetrics);\n\n    //refresh chart only if new values arrived\n    if(!this.isToRefreshChart(selectedPointValues, currentParameterForChart))\n      return ;\n\n    renderChart(this.ctrl.panel.id, selectedPointValues,\n      getTranslation(this.validatedMetrics, currentParameterForChart),\n      [\n        this.currentTargetForChart.target.options.type,\n        this.currentTargetForChart.target.options.id,\n        currentParameterForChart\n      ]\n    )\n\n    this.refreshChart = false\n  }\n\n\n  // helper method just to avoid unnecessary chart refresh\n  isToRefreshChart(selectedPointValues, currentParameterForChart) {\n    if(this.refreshChart)\n      return true;\n    let chartData = selectedPointValues.map((elem)=>[ elem.created_at, elem[currentParameterForChart] ]);\n    if(isEqual(this.currentChartData, chartData))\n      return false;\n    this.currentChartData = chartData\n    return true;\n  }\n\n  setDefaultValues() {\n    if (this.ctrl.panel.geoMarkerColoringBinding === undefined) {\n      this.ctrl.panel.geoMarkerColoringBinding = \"value\";\n    }\n\n    if (this.ctrl.panel.geoMarkerColoringThresholds === undefined) {\n      this.ctrl.panel.geoMarkerColoringThresholds = \"30, 50\";\n    }\n\n    if (this.ctrl.panel.geoMarkerColoringColorLow === undefined) {\n      this.ctrl.panel.geoMarkerColoringColorLow = \"red\";\n    }\n    if (this.ctrl.panel.geoMarkerColoringColorMedium === undefined) {\n      this.ctrl.panel.geoMarkerColoringColorMedium = \"orange\";\n    }\n    if (this.ctrl.panel.geoMarkerColoringColorHigh === undefined) {\n      this.ctrl.panel.geoMarkerColoringColorHigh = \"green\";\n    }\n  }\n}\n\nfunction getTranslation(measuresMetaInfo, measure) {\n  let resp = measuresMetaInfo.filter((measure_)=>measure_[0].toLowerCase()===measure.toLowerCase())\n  return resp.length>0 ? resp[0] : [measure, measure, null]\n}"]}