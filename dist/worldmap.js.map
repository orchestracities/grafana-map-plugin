{"version":3,"sources":["../src/worldmap.js"],"names":["CIRCLE_RADIUS","POLYGON_MAGNIFY_RATIO","WorldMap","ctrl","mapContainer","validatedMetrics","timeSeries","currentTargetForChart","currentParameterForChart","map","geoMarkers","events","on","flagChartRefresh","bind","setDefaultValues","refreshChart","layerNames","elem","L","layerGroup","location","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","layers","getLayers","sleepNote","sleepOpacity","hoverToWake","worldCopyJump","center","zoomControl","minZoom","maxZoom","attributionControl","setZoom","initialZoom","panTo","control","zoom","position","addTo","addLayersToMap","id","zoomLevel","getZoom","updateGeoLayers","selectedTileServer","TILE_SERVERS","tileServer","tileLayer","url","subdomains","reuseTiles","detectRetina","attribution","overlayMaps","i","length","forEach","layer","clearLayers","Object","keys","layerKey","minZoomShapes","hasLayer","removeLayer","addLayer","metrics","error","console","warn","Error","data","markersGJ","geoJSON","markers","markerClusterGroup","objectKey","lastObjectValues","type","geoJsonName","keyArray","k","toLowerCase","markerColor","getGeoMarkerColor","latitude","undefined","longitude","centroid","turf","geometry","coordinates","newGJ","createGeoJson","layersIcons","newIcon","createIcon","push","objectValues","layersColorType","layersColors","bindingValue","layersColorsBinding","getGeoMarkerColorThesholds","medium","high","layersColorsLow","layersColorsHigh","layersColorsMedium","thresholds","layersColorsThresholds","splitted","split","parseInt","dataPoint","geoMarkerColor","myStyle","retVal","style","JSON","parse","createPopup","associateEvents","layerIcon","icon","createMarker","createShape","dataPointExtraFields","shape","circle","rectangle","color","polygon","elementIcon","elementColor","markerProperties","AwesomeMarkers","prefix","marker","event","drawPointDetails","stickyPopupInfo","bindPopup","point","stickyLabels","openPopup","closePopup","setTimeout","invalidateSize","flyTo","mapCenterMoved","legend","removeFrom","zoomFactor","debug","target","options","selectedPointValues","lastValueMeasure","isToRefreshChart","chartData","created_at","currentChartData","getTranslation","measuresMetaInfo","measure","resp","filter","measure_"],"mappings":"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","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\n\n/* Vendor specific */\nimport { defaultsDeep, isEqual } from 'lodash';\n\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers.css!';\n\nimport * as L from './vendor/leaflet/leaflet';\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers';\nimport './vendor/leaflet-sleep/Leaflet.Sleep';\nimport './vendor/leaflet.markercluster/leaflet.markercluster';\nimport './vendor/leaflet.markercluster/MarkerCluster.Default.css!';\nimport './vendor/leaflet.markercluster/MarkerCluster.css!';\n\n/* App Specific */\nimport { TILE_SERVERS, PLUGIN_PATH } from './definitions';\nimport {\n  dataTreatment, processData, getTimeSeries, getUpdatedChartSeries,\n  hideAllGraphPopups, getDataPointExtraFields, getDataPointStickyInfo,\n  getMapMarkerClassName\n} from './utils/map_utils';\n\nimport * as turf from './vendor/turf/turf';\n\nconst CIRCLE_RADIUS = 200;\nconst POLYGON_MAGNIFY_RATIO = 3;\n\nexport default class WorldMap {\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.validatedMetrics = {};\n    this.timeSeries = {};\n    this.currentTargetForChart = null;\n    this.currentParameterForChart = null;\n    this.map = null;\n    this.geoMarkers = {};\n\n    this.ctrl.events.on('panel-size-changed', this.flagChartRefresh.bind(this));\n\n    this.setDefaultValues();\n  }\n\n  flagChartRefresh() {\n    this.refreshChart = true;\n  }\n\n  getLayers() {\n    return this.ctrl.layerNames.map((elem) => L.layerGroup());\n  }\n\n  createMap() {\n    const location = [ parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude) ];\n\n    this.layers = this.getLayers();\n\n    this.map = L.map(this.mapContainer,\n      {\n        sleepNote: false,\n        sleepOpacity: 0.8,\n        hoverToWake: false,\n        worldCopyJump: true,\n        center: location,\n        zoomControl: false,\n        minZoom: 3,\n        maxZoom: 20,\n        attributionControl: false,\n        layers: this.layers\n      });\n\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map.panTo(location);\n    L.control.zoom({position: 'topright'}).addTo(this.map);\n    this.addLayersToMap();\n\n    // this.map.on('zoomstart', (e) => { mapZoom = this.map.getZoom() });\n    this.map.on('click', () => {\n      hideAllGraphPopups(this.ctrl.panel.id);\n      this.currentTargetForChart = null;\n    });\n\n    this.map.on('zoomend', () => {\n      const zoomLevel = this.map.getZoom();\n      this.updateGeoLayers(zoomLevel);\n    });\n\n    const selectedTileServer = TILE_SERVERS[this.ctrl.tileServer];\n    L.tileLayer(selectedTileServer.url, {\n      maxZoom: 20,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n  }\n\n  addLayersToMap() {\n    this.overlayMaps = {};\n    for (let i = 0; i < this.ctrl.layerNames.length; i++) this.overlayMaps[this.ctrl.layerNames[i]] = this.layers[i];\n    L.control.layers({}, this.overlayMaps).addTo(this.map);\n  }\n\n  clearLayers() {\n    this.layers.forEach((layer) => layer.clearLayers());\n  }\n\n  updateGeoLayers(zoomLevel) {\n\n    Object.keys(this.geoMarkers).forEach((layerKey) => {\n      for (const layer of this.geoMarkers[layerKey]) {\n        if (zoomLevel < this.ctrl.panel.minZoomShapes) {\n          if (this.overlayMaps[layerKey].hasLayer(layer)) {\n            this.overlayMaps[layerKey].removeLayer(layer);\n          }\n        } else if (!this.overlayMaps[layerKey].hasLayer(layer)) {\n          this.overlayMaps[layerKey].addLayer(layer);\n        }\n      }\n    });\n  }\n\n  /* Validate metrics for a given target */\n  setMetrics() {\n    try {\n      this.validatedMetrics = this.ctrl.panel.metrics;\n    } catch (error) {\n      console.warn(error);\n      throw new Error('Please insert a valid JSON in the Metrics field (Edit > Tab Worldmap > Section AirQualityObserved - Metrics field)');\n    }\n  }\n\n  drawPoints() {\n    this.geoMarkers = {};\n\n    Object.keys(this.ctrl.data).forEach((layerKey) => {\n      const layer = this.ctrl.data[layerKey];\n\n      const markersGJ = L.geoJSON();\n      const markers = L.markerClusterGroup();\n\n      // for each layer\n      Object.keys(layer).forEach((objectKey) => {\n        const lastObjectValues = layer[objectKey][layer[objectKey].length - 1];\n        lastObjectValues.type = layerKey;\n\n        let geoJsonName = null;\n        const keyArray = Object.keys(lastObjectValues);\n        for (let k = 0; k < keyArray.length; k++) {\n          if (keyArray[k].toLowerCase() === 'geojson') {\n            geoJsonName = keyArray[k];\n            break;\n          }\n        }\n\n        const markerColor = this.getGeoMarkerColor(lastObjectValues);\n\n        if (geoJsonName !== null && lastObjectValues.latitude === undefined && lastObjectValues.longitude === undefined) {\n          const centroid = turf.centroid(lastObjectValues[geoJsonName]);\n          lastObjectValues.longitude = centroid.geometry.coordinates[0];\n          lastObjectValues.latitude = centroid.geometry.coordinates[1];\n        }\n\n        if (geoJsonName && lastObjectValues[geoJsonName] && lastObjectValues[geoJsonName].type !== 'Point') {\n          const newGJ = this.createGeoJson(lastObjectValues, geoJsonName, markerColor);\n          newGJ.addTo(markersGJ);\n        }\n        if (lastObjectValues.latitude && lastObjectValues.longitude && this.ctrl.panel.layersIcons[layerKey]) {\n          const newIcon = this.createIcon(lastObjectValues, geoJsonName);\n          try {\n            if (newIcon) markers.addLayer(newIcon);\n          } catch (error) { console.warn(layerKey); console.warn(error); }\n        }\n      });\n\n      this.overlayMaps[layerKey].addLayer(markers);\n      this.overlayMaps[layerKey].addLayer(markersGJ);\n\n      this.geoMarkers[layerKey] = this.geoMarkers[layerKey] || [];\n      this.geoMarkers[layerKey].push(markersGJ);\n    });\n  }\n\n  getGeoMarkerColor(objectValues) {\n    if (this.ctrl.panel.layersColorType[objectValues.type] === 'fix'){\n      return this.ctrl.panel.layersColors[objectValues.type];\n    } else {  \n      const bindingValue = objectValues[this.ctrl.panel.layersColorsBinding[objectValues.type]];\n      const {medium, high} = this.getGeoMarkerColorThesholds(objectValues);\n\n      if (bindingValue < medium) {\n        return this.ctrl.panel.layersColorsLow[objectValues.type];\n      }\n      if (bindingValue > high) {\n        return this.ctrl.panel.layersColorsHigh[objectValues.type];\n      }\n      return this.ctrl.panel.layersColorsMedium[objectValues.type];\n    }\n  }\n\n  getGeoMarkerColorThesholds(objectValues) {\n    const thresholds = this.ctrl.panel.layersColorsThresholds[objectValues.type] || '';\n    const splitted = thresholds.split(',');\n    return {\n      medium: parseInt(splitted[0], 10),\n      high: parseInt(splitted[1], 10),\n    };\n  }\n\n  createGeoJson(dataPoint, geoJsonName, geoMarkerColor) {\n    const myStyle = {\n      'color': geoMarkerColor,\n      'weight': 5,\n      'opacity': 0.65\n    };\n    let retVal;\n    if (typeof dataPoint[geoJsonName] === 'object') {\n      retVal = L.geoJSON(dataPoint[geoJsonName], {\n        style: myStyle\n      });\n    } else {\n      retVal = L.geoJSON(JSON.parse(dataPoint[geoJsonName]), {\n        style: myStyle\n      });\n    }\n\n    this.createPopup(\n      this.associateEvents(retVal),\n      getDataPointStickyInfo(dataPoint, this.ctrl.panel.metrics)\n    );\n    return retVal;\n  }\n\n  createIcon(dataPoint, geoJsonName) {\n    // console.log(this.ctrl.panel.layersIcons)\n    if (!dataPoint || !dataPoint.type) return null;\n\n    const layerIcon = this.ctrl.panel.layersIcons[dataPoint.type];\n    const icon = layerIcon ? this.createMarker(dataPoint, layerIcon, this.ctrl.panel.layersColors[dataPoint.type]) : this.createShape(dataPoint);\n\n    this.createPopup(\n      this.associateEvents(icon),\n      getDataPointStickyInfo(dataPoint, this.ctrl.panel.metrics)\n    );\n\n    return icon;\n  }\n\n  createShape(dataPoint) {\n    const dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    let shape;\n\n    defaultsDeep(dataPointExtraFields, dataPoint);\n\n    switch (dataPoint.type) {\n      case 'AirQualityObserved':\n        shape = L.circle([dataPoint.latitude, dataPoint.longitude], CIRCLE_RADIUS, dataPointExtraFields);\n        break;\n      case 'TrafficFlowObserved':\n        shape = L.rectangle([\n          [dataPoint.latitude - (0.001 * POLYGON_MAGNIFY_RATIO), dataPoint.longitude - (0.0015 * POLYGON_MAGNIFY_RATIO)],\n          [dataPoint.latitude + (0.001 * POLYGON_MAGNIFY_RATIO), dataPoint.longitude + (0.0015 * POLYGON_MAGNIFY_RATIO)]\n        ], dataPointExtraFields);\n        // shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointExtraFields)\n        break;\n      default:\n        dataPointExtraFields.color = 'green'; // default color\n        shape = L.polygon([\n          [dataPoint.latitude - (0.001 * POLYGON_MAGNIFY_RATIO), dataPoint.longitude - (0.0015 * POLYGON_MAGNIFY_RATIO)],\n          [dataPoint.latitude + (0.001 * POLYGON_MAGNIFY_RATIO), dataPoint.longitude],\n          [dataPoint.latitude - (0.001 * POLYGON_MAGNIFY_RATIO), dataPoint.longitude + (0.0015 * POLYGON_MAGNIFY_RATIO)],\n        ], dataPointExtraFields);\n    }\n\n    return shape;\n  }\n\n  createMarker(dataPoint, elementIcon, elementColor) {\n    const dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    const location = [dataPoint.latitude, dataPoint.longitude];\n\n    const markerProperties = {\n      icon: L.AwesomeMarkers.icon(\n        {\n          icon: elementIcon,\n          prefix: 'fa',\n          markerColor: (elementColor || dataPointExtraFields.markerColor),\n          // spin: true,\n        }\n      )\n    };\n    defaultsDeep(markerProperties, dataPoint);\n\n    return L.marker(location, markerProperties);\n  }\n\n  associateEvents(shape) {\n    return shape\n      .on('click', (event) => { this.currentTargetForChart = event; })\n      .on('click', () => this.drawPointDetails());\n  }\n\n  createPopup(shape, stickyPopupInfo) {\n    shape.bindPopup(stickyPopupInfo,\n      {\n        'offset': L.point(0, -2),\n        'className': 'worldmap-popup',\n        'closeButton': this.ctrl.panel.stickyLabels\n      });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      shape.on('mouseover', function () { this.openPopup(); });\n      shape.on('mouseout', function () { this.closePopup(); });\n    }\n  }\n\n  setTarget(event) {\n    this.currentTargetForChart = event;\n  }\n\n  resize() {\n    setTimeout(() => {\n      this.map.invalidateSize();\n    }, 0);\n  }\n\n  panToMapCenter() {\n    const location = [parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)];\n\n    /*    if ( 'Location Variable' === this.ctrl.panel.mapCenter && this.ctrl.isADiferentCity() ) {\n      console.log('diferent city detected')\n\n      this.ctrl.setNewCoords()\n        .then(() => {\n          console.debug('flying to a new location')\n          console.debug(location)\n          this.map.flyTo(location)\n          this.ctrl.refresh();\n        })\n        .catch(error => console.warn(error))\n      return ;\n    } */\n\n    this.map.flyTo(location);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  drawPointDetails() {\n    console.debug('drawPointDetails');\n    if (this.currentTargetForChart == null) {\n      console.debug('no point selected in map');\n      return;\n    }\n\n    const currentParameterForChart = this.currentParameterForChart || 'value';\n    if (!this.currentTargetForChart.target.options.type || this.currentTargetForChart.target.options.id) {\n      return;\n    }\n    const selectedPointValues = this.ctrl.data[this.currentTargetForChart.target.options.type][this.currentTargetForChart.target.options.id];\n    if (!selectedPointValues) {\n      return;\n    }\n    const lastValueMeasure = selectedPointValues[selectedPointValues.length - 1];\n\n    // refresh chart only if new values arrived\n    if (!this.isToRefreshChart(selectedPointValues, currentParameterForChart)) return;\n\n    this.refreshChart = false;\n  }\n\n\n  // helper method just to avoid unnecessary chart refresh\n  isToRefreshChart(selectedPointValues, currentParameterForChart) {\n    if (this.refreshChart) return true;\n    const chartData = selectedPointValues.map((elem) => [ elem.created_at, elem[currentParameterForChart] ]);\n    if (isEqual(this.currentChartData, chartData)) return false;\n    this.currentChartData = chartData;\n    return true;\n  }\n\n  setDefaultValues() {\n    Object.keys(this.ctrl.data).forEach((layerKey) => {\n      if (this.ctrl.panel.layersColorsBinding[layerKey] === undefined) {\n        this.ctrl.panel.layersColorsBinding[layerKey] = 'value';\n      }\n      if (this.ctrl.panel.layersColorsThresholds[layerKey] === undefined) {\n        this.ctrl.panel.layersColorsThresholds[layerKey] = '30, 50';\n      }\n    \n      if (this.ctrl.panel.layersColorsLow[layerKey] === undefined) {\n        this.ctrl.panel.layersColorsLow[layerKey] = 'red';\n      }\n      if (this.ctrl.panel.layersColorsMedium[layerKey] === undefined) {\n        this.ctrl.panel.layersColorsMedium[layerKey] = 'orange';\n      }\n      if (this.ctrl.panel.layersColorsHigh[layerKey] === undefined) {\n        this.ctrl.panel.layersColorsHigh[layerKey] = 'green';\n      }\n    });\n  }\n}\n\nfunction getTranslation(measuresMetaInfo, measure) {\n  const resp = measuresMetaInfo.filter((measure_) => measure_[0].toLowerCase() === measure.toLowerCase());\n  return resp.length > 0 ? resp[0] : [measure, measure, null];\n}\n"],"file":"worldmap.js"}